@page "/chat"
@using reSep3Client.Models
@using System.Net.WebSockets
@using System.Text.Json
@inject IJSRuntime JS
@inject IJSRuntime JSRuntime
@inject WebSocketService WebSocketService
@using reSep3Client.Webservices
@inject HttpClient HttpClient

<div class="chat-container" style="position: fixed; left:6.5%; bottom: 0; width: 100%; display: flex; flex-direction: column; justify-content: flex-end; align-items: center; padding: 20px; background-color: transparent;">
    <div class="messages-container" style="flex-grow: 1; width: 100%; max-width: 600px; overflow-y: auto; margin-bottom: 10px; color: white;">
        @foreach (var message in messages)
        {
            <div class="message" style="background-color: transparent; border-radius: 20px; padding: 10px; margin: 5px 0; max-width: 80%;">@message</div>
        }
    </div>
    <div class="input-container" style="display: flex; align-items: center; width: 100%; max-width: 600px;">
        <input type="text" @bind="newMessage" class="chat-input" placeholder="Type your message..." @onkeydown="HandleEnter" style="flex-grow: 1; padding: 10px; border: none; border-radius: 20px; margin-right: 10px; background-color: #333; color: white; outline: none;" />
        <button class="send-button" @onclick="SendMessage" style="background-color: #007bff; border: none; color: white; padding: 10px; border-radius: 50%; cursor: pointer;">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" style="fill: white;">
                <path d="M2.01 21l19.74-9.74L2.01 1.52v8.84L14.72 12 2.01 13.64z"></path>
            </svg>
        </button>
    </div>
</div>

@code {
    private List<string> messages = new List<string>();
    private string newMessage = string.Empty;
    private string userId = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await WebSocketService.ConnectAsync("ws://localhost:5000/socket.io/?EIO=4&transport=websocket");
            userId = await JSRuntime.InvokeAsync<string>("eval", "localStorage.getItem('userId')").ConfigureAwait(false);       
            Console.WriteLine(userId);

            var response = await HttpClient.GetAsync($"http://localhost:8080/chathistories/user/{userId}");
            response.EnsureSuccessStatusCode();

            var jsonString = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"Received JSON: {jsonString}");

            var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                PropertyNameCaseInsensitive = true
            };

            var chatMessages = JsonSerializer.Deserialize<List<ChatMessage>>(jsonString, options);

            if (chatMessages != null)
            {
                messages.Clear(); // 清除现有消息
                foreach (var chatMessage in chatMessages)
                {
                    messages.Add($"You: {chatMessage.UserMessage}");
                    messages.Add($"Server: {chatMessage.BotMessage}");
                }
                StateHasChanged(); // 确保页面更新
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Initialization error: {ex.Message}");
        }
    }


    private async Task SendMessage()
{
    if (!string.IsNullOrWhiteSpace(newMessage))
    {
        
        string userIdString = await JSRuntime.InvokeAsync<string>("eval", "localStorage.getItem('userId')").ConfigureAwait(false);
        if (long.TryParse(userIdString, out long userId))
        {
            Console.WriteLine(userId);
            
            var chatMessage = new ChatMessage
            {
                UserId = userId,  
                UserMessage = newMessage,
                Timestamp = DateTime.UtcNow 
            };

            messages.Add($"You: {newMessage}"); 
            
            await WebSocketService.SendMessageAsync(chatMessage);
           
            var response = await WebSocketService.ReceiveMessageAsync();
            var responseJson = JsonDocument.Parse(response);
            var prediction = responseJson.RootElement.GetProperty("prediction").GetString();
            messages.Add($"Server: {prediction}");

            newMessage = string.Empty;
        }
        else
        {
            Console.WriteLine("Failed to parse userId.");
        }
    }
}


    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
            if (JS != null)
            {
                await JS.InvokeVoidAsync("document.querySelector('.chat-input').focus");
            }
        }
    }
}
